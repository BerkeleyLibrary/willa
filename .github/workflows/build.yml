name: Build / Test / Push

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-image: ${{ steps.build-meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Produce the build image tag
        id: build-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: type=sha,suffix=-build-${{ github.run_id }}_${{ github.run_attempt }}

      - name: Build and push the untested image
        uses: docker/build-push-action@v6
        with:
          push: true
          labels: ${{ steps.build-meta.outputs.labels }}
          tags: ${{ steps.build-meta.outputs.tags }}
          provenance: true
          sbom: true
          target: development
          cache-from: type=gha
          cache-to: type=gha

  test:
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        test:
          - mypy .
          - pydoclint .
          # pylint returns error codes if the checks fail
          # https://pylint.readthedocs.io/en/latest/user_guide/usage/run.html#exit-codes
          - pylint -v .
          - python -m unittest -v
    env:
      COMPOSE_FILE: docker-compose.yml:docker-compose.ci.yml
      DOCKER_APP_IMAGE: ${{ needs.build.outputs.build-image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set ARTIFACTS_DIR
        run: echo "ARTIFACTS_DIR=${RUNNER_TEMP}/artifacts" >> $GITHUB_ENV

      - name: Create the artifacts directory
        run: mkdir -p "$ARTIFACTS_DIR"

      - name: Record start time
        run: TEST_START=`date +%s` >> $GITHUB_ENV

      - name: Run the test command
        run: |
          docker compose run --no-deps --rm app ${{ matrix.test }}

      - name: Upload test report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: Test Report - ${{ matrix.test }} (${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }})
          path: ${{ env.ARTIFACTS_DIR }}
          if-no-files-found: warn

  push:
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Produce permanent image tags
        id: branch-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Retag and push the image
        uses: docker/build-push-action@v6
        with:
          push: true
          labels: ${{ steps.branch-meta.outputs.labels }}
          tags: ${{ steps.branch-meta.outputs.tags }}
          cache-from: type=registry,ref=${{ needs.build.outputs.build-image }}
          target: app
